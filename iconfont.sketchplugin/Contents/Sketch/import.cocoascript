@import "library.cocoascript";

var onRun = function(context) {

  	var plugin        	= context.plugin
  	var doc           	= context.document
  	var fileManager	  	= NSFileManager.defaultManager()
  	var scriptFullPath 	= context.scriptPath
  	var directoryPlugin = [scriptFullPath stringByDeletingLastPathComponent]
  	var resources		= [directoryPlugin stringByDeletingLastPathComponent] + "/Resources"

  	// 1. Select SVG Font
  	font = Library.fetch.selectFont("Select SVG file of icon-font")
  	svg = Library.fetch.file(font.path()).toString()
  	fontname = svg.match(/id=".+?"/)[0].split('"')[1]


  	// 2. Create Window
  	var wrapper     	= Library.Widgets.window("Import Font",fontname)

  	// 3. Create a text field to write icon container
	var container     = [[NSTextField alloc] initWithFrame:NSMakeRect(200,275,200,24)]
	container.setBackgroundColor(NSColor.clearColor())
	container.setPlaceholderString(@"Write icon-container here")
	container.setTarget(self)
	container.setCOSJSTargetFunction(function(sender){
		wrapper.window.orderOut(nil)
		NSApp.stopModalWithCode(NSOKButton)
	})
	wrapper.main.addSubview(container)

	hint = Library.Widgets.subtitle("You need to write like this: <i class='fa fa-*****'></i>",14,NSColor.grayColor(),NSMakeRect(130, 220, 500, 30))
	wrapper.main.addSubview(hint)

	hint2 = Library.Widgets.subtitle("It will be like this: <i class='fa fa-iconname'></i>",14,NSColor.grayColor(),NSMakeRect(145, 190, 500, 30))
	wrapper.main.addSubview(hint2)

	// 3.1. Create a button to start import
	var submit = [[NSButton alloc] initWithFrame:NSMakeRect(230, 100, 200, 50)]
  	submit.setTitle("")
  	submit.setAction("callAction:")
  	submit.setWantsLayer(true)
  	submit.setCOSJSTargetFunction(function(sender) {
    	wrapper.window.orderOut(nil)
    	NSApp.stopModalWithCode(NSOKButton)
  	})

	var submit_text = CATextLayer.layer()
	submit_text.setBackgroundColor(NSColor.blackColor())
	submit_text.setForegroundColor(CGColorCreateGenericRGB(215/255, 159/255, 0/255, 1.0))
	submit_text.setFontSize(18)
	submit_text.contentsScale = NSScreen.mainScreen().backingScaleFactor()
	submit_text.string = "+ Import this font"

	submit.setLayer(submit_text)
	wrapper.main.addSubview(submit)

  	// 3. Parse Glyphs of Font
  	glyphs = svg.match(/<glyph[^>]*?>/g)

  	var list = {"icons": []}

  	for (i = 0; i < glyphs.length; i++) {
  		glyph = glyphs[i]
  		name = glyph.match(/glyph-name=".+?"/)[0].split('"')[1]
  		unicode = glyph.match(/unicode=".+?"/)[0].split('"')[1]
  		sliced = unicode.slice(3,7)

  		icon = {"name":name,"id":name,"unicode":sliced,"created":1}
  		list.icons.push(icon)
  	}

  	json = JSON.stringify(list)

  	// 4. Build a directory for custom icon-fonts
	var customs = resources + "/customs"
  	
  	if (![fileManager fileExistsAtPath:customs]) {
  		[fileManager createDirectoryAtPath:customs withIntermediateDirectories:true attributes:nil error:nil]
  	}

  	// 5. Build a json file for new font into customs folder
  	if (![fileManager fileExistsAtPath:customs +"/"+ fontname + ".json"]) {
  		[fileManager createFileAtPath:customs +"/"+ fontname + ".json" contents:"" attributes:nil]
  	}
  
  	// 8. Find path of manifest.json
  	var manifestPath = directoryPlugin + "/manifest.json"

  	// 9. Fetch data of manifest.json
  	var data = [NSData dataWithContentsOfFile:manifestPath]
  	manifest = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers error:nil]

  	// 10. Add a command to manifest.json
 	nextid = manifest.commands.length() +1
 	command = {
 		"script": "add_grid.cocoascript",
      	"handler": "handleFont",
      	"name": fontname,
      	"identifier": nextid + "_add_grid"
 	}
 	
 	// add command to manifest
 	[[manifest objectForKey:@"commands"] addObject:command]
 	menu = [manifest objectForKey:@"menu"]
 	items = [menu objectForKey:@"items"]
 	first = [items objectAtIndex:0]
 	[[first objectForKey:@"items"] addObject:@""+nextid + "_add_grid"]

 	var response = NSApp.runModalForWindow(wrapper.window)

 	// if is the response is ok, import font
  	if (response == NSOKButton) {

	  	// 7. Write font data to json file
	  	var t = [NSString stringWithFormat:@"%@", json]
	  	f = [NSString stringWithFormat:@"%@", customs +"/"+ fontname + ".json"]
	  	[t writeToFile:f atomically:true encoding:NSUTF8StringEncoding error:nil]

  		// 11. Write new data to manifest.file
  		Library.create.file(manifest,manifestPath)

	  	// 12. Fetch font.json file
	  	properties = Library.fetch.json("fonts.json",plugin)

	  	// 13. Create properties for new font
	  	writed_cont = container.stringValue()

	  	// if user didnt write a container create example
	  	if (!(writed_cont && writed_cont.length() > 0)) {
	  		writed_cont = "<i class='"+fontname+"-*****'></i>"
	  	}

	  	property = {
			"path": "customs/"+ fontname + ".json",
			"container": writed_cont
	 	}

	 	// 14. Add new font properties to font.json
	 	if ([properties isKindOfClass:[NSDictionary class]]) {
	 		dict = [[NSMutableDictionary alloc] initWithDictionary:properties]
	 		list = [[NSMutableDictionary alloc] initWithDictionary:[dict objectForKey:@"fonts"]]
	 		list[@""+fontname] = property
	 		dict[@"fonts"] = list
	 	}

  		// 15. Write new data to fonts.json
 		Library.create.file(dict,resources + "/fonts.json")
  	}
};